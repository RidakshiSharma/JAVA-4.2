import java.util.*;
import java.util.stream.*;
import java.util.Comparator;

public class PartC {

    static class Product {
        String name;
        double price;
        String category;

        Product(String name, double price, String category) {
            this.name = name;
            this.price = price;
            this.category = category;
        }
    }

    public static void main(String[] args) {
        List<Product> products = Arrays.asList(
            new Product("Laptop", 50000, "Electronics"),
            new Product("Phone", 30000, "Electronics"),
            new Product("Shirt", 1500, "Clothing"),
            new Product("Jeans", 2000, "Clothing"),
            new Product("Fridge", 25000, "Electronics")
        );

        // Grouping by category
        System.out.println("Products grouped by category:");
        Map<String, List<Product>> grouped = products.stream()
                .collect(Collectors.groupingBy(p -> p.category));
        grouped.forEach((cat, list) -> {
            System.out.println(cat + " -> " + list.stream().map(p -> p.name).toList());
        });

        // Most expensive product in each category
        System.out.println("\nMost expensive product in each category:");
        Map<String, Optional<Product>> maxPrice = products.stream()
                .collect(Collectors.groupingBy(
                        p -> p.category,
                        Collectors.maxBy(Comparator.comparingDouble(p -> p.price))
                ));
        maxPrice.forEach((cat, prod) ->
            System.out.println(cat + " -> " + prod.get().name + " (" + prod.get().price + ")")
        );

        // Average price of all products
        double avgPrice = products.stream()
                .collect(Collectors.averagingDouble(p -> p.price));
        System.out.println("\nAverage price of all products: " + avgPrice);
    }
}
